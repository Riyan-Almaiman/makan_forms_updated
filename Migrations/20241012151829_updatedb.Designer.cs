// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace forms_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241012151829_updatedb")]
    partial class updatedb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("forms_api.Entities.Approval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("SupervisorComment")
                        .HasColumnType("longtext");

                    b.Property<int?>("SupervisorTaqniaID")
                        .HasColumnType("int");

                    b.HasKey("ApprovalId");

                    b.HasIndex("FormId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("forms_api.Entities.Calculation", b =>
                {
                    b.Property<int>("CalculationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("DailyHours")
                        .HasColumnType("double");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RemarkId")
                        .HasColumnType("int");

                    b.Property<double>("ValuePer8Hours")
                        .HasColumnType("double");

                    b.Property<double>("ValuePerHour")
                        .HasColumnType("double");

                    b.HasKey("CalculationId");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RemarkId");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("forms_api.Entities.DailyTarget", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Completion")
                        .HasColumnType("double");

                    b.Property<double?>("ExpectedProductivity")
                        .HasColumnType("double");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("double");

                    b.Property<bool>("IsQC")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LayerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Productivity")
                        .HasColumnType("double");

                    b.Property<int?>("RemarkId")
                        .HasColumnType("int");

                    b.Property<int?>("SheetAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("SheetLayerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SheetNumber")
                        .HasColumnType("longtext");

                    b.HasKey("TargetId");

                    b.HasIndex("FormId");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RemarkId");

                    b.HasIndex("SheetAssignmentId");

                    b.HasIndex("SheetLayerStatusId");

                    b.ToTable("DailyTargets");
                });

            modelBuilder.Entity("forms_api.Entities.Form", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionRole")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductivityDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SupervisorTaqniaID")
                        .HasColumnType("int");

                    b.Property<int>("TaqniaID")
                        .HasColumnType("int");

                    b.HasKey("FormId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaqniaID");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("forms_api.Entities.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("forms_api.Entities.Links", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("forms_api.Entities.OTPEntity", b =>
                {
                    b.Property<int>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OTP")
                        .HasColumnType("longtext");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext");

                    b.Property<int>("TaqniaId")
                        .HasColumnType("int");

                    b.HasKey("OTPId");

                    b.ToTable("OTPEntities");
                });

            modelBuilder.Entity("forms_api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("forms_api.Entities.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+DailySheetAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SheetNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TaqniaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("TaqniaId");

                    b.ToTable("DailySheets");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+Sheet", b =>
                {
                    b.Property<int>("SheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Agriculture")
                        .HasColumnType("longtext");

                    b.Property<string>("Buildings")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeliveryNumber")
                        .HasColumnType("int");

                    b.Property<string>("Hydrography")
                        .HasColumnType("longtext");

                    b.Property<bool>("InProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Physiography")
                        .HasColumnType("longtext");

                    b.Property<bool>("QCInProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Roads")
                        .HasColumnType("longtext");

                    b.Property<string>("SheetName")
                        .HasColumnType("longtext");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("SheetId");

                    b.ToTable("Sheets");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+SheetAssignment", b =>
                {
                    b.Property<int>("SheetAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("InProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsQC")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("SheetId")
                        .HasColumnType("int");

                    b.Property<int>("TaqniaID")
                        .HasColumnType("int");

                    b.HasKey("SheetAssignmentId");

                    b.HasIndex("LayerId");

                    b.HasIndex("SheetId");

                    b.HasIndex("TaqniaID");

                    b.ToTable("SheetAssignments");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+SheetLayerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Completion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinalQCInProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinalizedQCInProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsQCInProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SheetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SheetId");

                    b.ToTable("SheetLayerStatus");
                });

            modelBuilder.Entity("forms_api.Entities.Targets", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EditorCount")
                        .HasColumnType("int");

                    b.Property<int?>("LayerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Productivity")
                        .HasColumnType("double");

                    b.HasKey("TargetId");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("forms_api.Entities.User", b =>
                {
                    b.Property<int>("TaqniaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("longtext");

                    b.Property<string>("Layer")
                        .HasColumnType("longtext");

                    b.Property<int?>("LayerAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NationalID")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Product")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProductAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionRole")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<int?>("SupervisorTaqniaID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("TaqniaID");

                    b.HasIndex("LayerAssignmentId");

                    b.HasIndex("ProductAssignmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("forms_api.Entities.WeeklyTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FridayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MondayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionRole")
                        .HasColumnType("int");

                    b.Property<decimal?>("SaturdayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SundayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ThursdayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TuesdayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WednesdayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WeeklyTargets");
                });

            modelBuilder.Entity("forms_api.Entities.Approval", b =>
                {
                    b.HasOne("forms_api.Entities.Form", "Form")
                        .WithMany("Approvals")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("forms_api.Entities.Calculation", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Remark", "Remark")
                        .WithMany()
                        .HasForeignKey("RemarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Product");

                    b.Navigation("Remark");
                });

            modelBuilder.Entity("forms_api.Entities.DailyTarget", b =>
                {
                    b.HasOne("forms_api.Entities.Form", "Form")
                        .WithMany("DailyTargets")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId");

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("forms_api.Entities.Remark", "Remark")
                        .WithMany()
                        .HasForeignKey("RemarkId");

                    b.HasOne("forms_api.Entities.SheetEntities+SheetAssignment", "SheetAssignment")
                        .WithMany()
                        .HasForeignKey("SheetAssignmentId");

                    b.HasOne("forms_api.Entities.SheetEntities+SheetLayerStatus", "SheetLayerStatus")
                        .WithMany()
                        .HasForeignKey("SheetLayerStatusId");

                    b.Navigation("Form");

                    b.Navigation("Layer");

                    b.Navigation("Product");

                    b.Navigation("Remark");

                    b.Navigation("SheetAssignment");

                    b.Navigation("SheetLayerStatus");
                });

            modelBuilder.Entity("forms_api.Entities.Form", b =>
                {
                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("forms_api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("TaqniaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("forms_api.Entities.Links", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+DailySheetAssignments", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("TaqniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+SheetAssignment", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId");

                    b.HasOne("forms_api.Entities.SheetEntities+Sheet", "Sheet")
                        .WithMany("SheetAssignments")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.User", "User")
                        .WithMany("SheetAssignments")
                        .HasForeignKey("TaqniaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Sheet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+SheetLayerStatus", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany("SheetLayerStatuses")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("forms_api.Entities.SheetEntities+Sheet", "Sheet")
                        .WithMany("LayerStatuses")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Product");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("forms_api.Entities.Targets", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId");

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Layer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("forms_api.Entities.User", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "LayerAssignment")
                        .WithMany()
                        .HasForeignKey("LayerAssignmentId");

                    b.HasOne("forms_api.Entities.Product", "ProductAssignment")
                        .WithMany()
                        .HasForeignKey("ProductAssignmentId");

                    b.Navigation("LayerAssignment");

                    b.Navigation("ProductAssignment");
                });

            modelBuilder.Entity("forms_api.Entities.WeeklyTarget", b =>
                {
                    b.HasOne("forms_api.Entities.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("forms_api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("forms_api.Entities.Form", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("DailyTargets");
                });

            modelBuilder.Entity("forms_api.Entities.Layer", b =>
                {
                    b.Navigation("SheetLayerStatuses");
                });

            modelBuilder.Entity("forms_api.Entities.SheetEntities+Sheet", b =>
                {
                    b.Navigation("LayerStatuses");

                    b.Navigation("SheetAssignments");
                });

            modelBuilder.Entity("forms_api.Entities.User", b =>
                {
                    b.Navigation("SheetAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
